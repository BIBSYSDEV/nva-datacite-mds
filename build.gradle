plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
}

group 'no.unit.nva'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}

def junit5Version = '5.6.0'
def zalandoVersion = '0.23.0'

dependencies {
    implementation group: 'com.github.BIBSYSDEV', name: 'nva-commons', version: 'v0.3.0'

    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.10'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.0'
    implementation group: 'com.amazonaws.secretsmanager', name: 'aws-secretsmanager-caching-java', version: '1.0.1'

    implementation group: 'org.zalando', name: 'problem', version: zalandoVersion
    implementation group: 'org.zalando', name: 'jackson-datatype-problem', version: zalandoVersion

    testImplementation group: 'com.github.BIBSYSDEV', name: 'nva-testutils', version: 'v0.1.6'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.2.4'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-migrationsupport', version: junit5Version
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
}

test {
    useJUnitPlatform()
    failFast = true
    testLogging{
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }
        }
    }
}


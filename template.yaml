AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sample SAM Template for AWS

Metadata:
  AWS::ServerlessRepo::Application:
    Name: NvaDataciteMds
    Description: Backend for communicating with the DataCite MDS API
    Author: Unit
    SemanticVersion: 1.0.0
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE


Globals:
  Function:
    Timeout: 20
  Api:
    Cors:
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowMethods: "'OPTIONS, POST'"
      AllowOrigin: "'*'"


Parameters:
  CognitoAuthorizerArn:
    Type: String
    Description: Reference to Cognito UserPool for the stage
  CustomDomain:
    Type: String
    Description: Custom API to connect this lambda to
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
  DataciteMdsConfigs:
    Type: String
    Description: Institution configs for Datacite MDS API
    Default: '{{resolve:secretsmanager:dataciteMdsConfigs:SecretString}}'

Resources:
  NvaDataciteMdsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !Ref CognitoAuthorizerArn
      EndpointConfiguration: Regional
      DefinitionBody:
        openapi: 3.0.0
        info:
          title: NVA Datacite MDS
          version: '1.0'
        paths:
          /:
            post:
              summary: Create DOI
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaAssignDoiProxyFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '201':
                  description: Created.
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/createDoiResponseBody'
                '400':
                  description: Bad request.
                  schema:
                    $ref: '#/definitions/Problem'
                '402':
                  description: Payment required.
                  schema:
                    $ref: '#/definitions/Problem'
                '500':
                  description: Internal server error.
                  schema:
                    $ref: '#/definitions/Problem'
        components:
          securitySchemes:
            CognitoUserPool:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                  - !Ref CognitoAuthorizerArn
          schemas:
            createDoiResponseBody:
              title: Doi created
              type: string
              description: The created doi
            Problem:
              type: object
              properties:
                title:
                  type: string
                status:
                  type: integer
                detail:
                  type: string
  NvaAssignDoiProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: assign-doi-proxy-function
      Handler: no.unit.nva.datacite.DataciteMdsCreateDoiHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          DATACITE_MDS_CONFIGS: !Ref DataciteMdsConfigs
          ALLOWED_ORIGIN: '*'
      Events:
        NvaAssignDoiProxyEvent:
          Type: Api
          Properties:
            RestApiId: !Ref NvaDataciteMdsApi
            Path: /
            Method: POST

  NvaDataciteMdsBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref CustomDomainBasePath
      DomainName: !Ref CustomDomain
      RestApiId: !Ref NvaDataciteMdsApi
      Stage: !Ref NvaDataciteMdsApi.Stage

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaDefaults
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - sts:AssumeRole
                  - sts:TagSession
                Resource: "*"
        - PolicyName: Events
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:*
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:*
                  - lambda:InvokeFunction
                Resource: "*"

  DestinationsEventConsumer:
    DependsOn:
      - EventBus
      - FailQueue
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dynamo-event-to-datacite-request
      Handler: no.unit.nva.events.examples.DestinationsEventConsumer::handleRequest
      Runtime: java11
      MemorySize: 1400
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENT_BUS: !GetAtt EventBus.Name
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !GetAtt EventBus.Name
            Pattern: { "detail-type": [ { "prefix": "Lambda Function Invocation Result" } ] }
  EventConducer:
    DependsOn:
      - EventBus
      - FailQueue
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dynamo-event-to-datacite-request
      Handler: no.unit.nva.events.examples.EventConducer::handleRequest
      Runtime: java11
      MemorySize: 1400
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENT_BUS: !GetAtt EventBus.Name
          AWC_ACCOUNT_ID: !Ref AWS::AccountId
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !GetAtt EventBus.Name
            Pattern: { "detail-type": [ "MyType" ] }
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !GetAtt EventBus.Arn
          OnFailure:
            Type: SQS
            Destination: !GetAtt FailQueue.Arn
  EventProducer:
    DependsOn:
      - EventBus
      - FailQueue
      - DestinationsEventConsumer
      - EventConducer
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dynamo-event-to-datacite-request
      Handler: no.unit.nva.events.examples.EventProducer::handleRequest
      Runtime: java11
      MemorySize: 1400
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENT_BUS: !GetAtt EventBus.Name
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: orestis-event-bus
  FailQueue:
    Type: AWS::SQS::Queue
    Properties:
      MaximumMessageSize: 262144
      QueueName: orestis-failure-queue
